// Generated by CoffeeScript 1.6.2
(function() {
  var fs, noteddb, path;

  fs = require('fs');

  path = require('path');

  noteddb = (function() {
    function noteddb(notebookdir) {
      this.notebookdir = notebookdir;
    }

    noteddb.prototype.generateUid = function() {
      var s4;

      s4 = function() {
        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
      };
      return (s4() + s4() + s4() + s4()).toLowerCase();
    };

    /*
    	# Finds the filename of a particular note id
    	# @param {String} id The note you're searching for
    	# @return {String} filename The found filename
    */


    noteddb.prototype.filenameNote = function(id) {
      var files, i;

      files = fs.readdirSync(this.notebookdir);
      i = 0;
      while (i >= 0) {
        if (files[i] === void 0 || files[i].match("." + id + ".noted")) {
          return files[i];
        }
        i++;
      }
    };

    /*
    	# Creates a new notebook
    	# @param {String} name The notebook name
    	# @return {String} id The new notebook id
    */


    noteddb.prototype.createNotebook = function(name) {
      var id;

      id = this.generateUid();
      while (fs.existsSync(path.join(this.notebookdir, id + ".json"))) {
        id = this.generateUid();
      }
      fs.writeFile(path.join(this.notebookdir, id + ".json"), JSON.stringify({
        id: id,
        name: name
      }));
      return id;
    };

    /*
    	# Creates a new note
    	# @param {String} name The new note name
    	# @param {String} notebook The id of the notebook
    	# @param {String} content The note content
    	# @return {String} id The new note id
    */


    noteddb.prototype.createNote = function(name, notebook, content) {
      var id;

      id = this.generateUid();
      while (fs.existsSync(path.join(this.notebookdir, notebook + "." + id + ".noted"))) {
        id = this.generateUid();
      }
      fs.writeFile(path.join(this.notebookdir, notebook + "." + id + ".noted"), JSON.stringify({
        id: id,
        name: name,
        notebook: notebook,
        content: content,
        date: Math.round(new Date() / 1000)
      }));
      return id;
    };

    /*
    	# List notebooks
    	# @param {Boolean} [names=false] Whether to return names of notebook
    	# @return {Array} notebooks List of Notebooks
    */


    noteddb.prototype.readNotebooks = function(names) {
      var files, notebooks,
        _this = this;

      files = fs.readdirSync(this.notebookdir);
      notebooks = [];
      files.forEach(function(file) {
        if (file.substr(16, 5) === ".json") {
          if (names) {
            return notebooks.push({
              id: file.substr(0, 16),
              name: JSON.parse(fs.readFileSync(path.join(_this.notebookdir, file))).name
            });
          } else {
            return notebooks.push(file.substr(0, 16));
          }
        }
      });
      return notebooks;
    };

    /*
    	# Read a notebook
    	# @param {String} id The notebook id
    	# @return {Object} notebook Notebook metadata with list of notes
    */


    noteddb.prototype.readNotebook = function(id) {
      var files, notebook;

      notebook = JSON.parse(fs.readFileSync(path.join(this.notebookdir, id + ".json")));
      notebook.contents = [];
      files = fs.readdirSync(this.notebookdir);
      files.forEach(function(file) {
        if (file.match(id) && file.substr(16, 5) !== ".json") {
          return notebook.contents.push(file.substr(17, 16));
        }
      });
      return notebook;
    };

    /*
    	# Read a note
    	# @param {String} id The note id
    	# @return {Object} note Note metadata with content
    */


    noteddb.prototype.readNote = function(id) {
      var note;

      note = fs.readFileSync(path.join(this.notebookdir, this.filenameNote(id)));
      return JSON.parse(note.toString());
    };

    /*
    	# Update Notebook Metadata
    	# @param {String} id The notebook id
    	# @param {Object} data The new notebook data
    	# @return {Object} data The updated notebook data
    */


    noteddb.prototype.updateNotebook = function(id, data) {
      data.id = id;
      fs.writeFile(path.join(this.notebookdir, id + ".json"), JSON.stringify(data));
      return data;
    };

    /*
    	# Update Note Data
    	# @param {String} id The note id
    	# @param {Object} data The new note data
    	# @return {Object} data The updated note data
    */


    noteddb.prototype.updateNote = function(id, data) {
      data.id = id;
      data.date = Math.round(new Date() / 1000);
      if (data.notebook !== this.readNote(id).notebook) {
        fs.renameSync(path.join(this.notebookdir, this.filenameNote(id)), path.join(this.notebookdir, data.notebook + "." + id + ".noted"));
      }
      fs.writeFile(path.join(this.notebookdir, data.notebook + "." + id + ".noted"), JSON.stringify(data));
      return data;
    };

    /*
    	# Deletes a notebook
    	# @param {String} id The notebook id
    */


    noteddb.prototype.deleteNotebook = function(id) {
      var _this = this;

      this.readNotebook(id).contents.forEach(function(file) {
        return fs.unlink(path.join(_this.notebookdir, id + "." + file + ".noted"));
      });
      return fs.unlink(path.join(this.notebookdir, id + ".json"));
    };

    /*
    	# Deletes a note
    	# @param {String} id The note id
    */


    noteddb.prototype.deleteNote = function(id) {
      return fs.unlink(path.join(this.notebookdir, this.filenameNote(id)));
    };

    return noteddb;

  })();

  module.exports = noteddb;

}).call(this);
